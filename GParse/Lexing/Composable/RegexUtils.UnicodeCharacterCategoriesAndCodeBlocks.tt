<#@ template debug="false" hostspecific="true" language="C#" #>
<#@ assembly name="System" #>
<#@ assembly name="System.Core" #>
<#@ assembly name="System.Linq" #>
<#@ assembly name="System.Xml" #>
<#@ assembly name="System.Xml.Linq" #>
<#@ import namespace="System.Collections.Generic" #>
<#@ import namespace="System.Globalization" #>
<#@ import namespace="System.Linq" #>
<#@ import namespace="System.Xml.Linq" #>
<#@ output extension=".cs" #>
<#
var doc = XDocument.Load ( Host.ResolvePath ( "UnicodeCharacterCategoriesAndCodeBlocks.xml" ) );
var entries = doc.Descendants ( "Entry" );
#>
using System;
using System.Collections.Generic;
using System.Collections.Immutable;
using System.Diagnostics.CodeAnalysis;
using System.Globalization;
using GParse.Composable;

namespace GParse.Lexing.Composable
{
    /// <summary>
    /// Contains common character classes.
    /// </summary>
    public static partial class RegexUtils
    {
        /// <summary>
        /// The class containing all regex unicode character categories and code blocks.
        /// </summary>
        public static class CharacterCategories
        {
            #region Fields

<#
var root = new TreeNode ( );
foreach ( var entry in entries )
{
    var name = entry.Attribute ( "Name" ).Value;
    var value = entry.Attribute ( "Value" ).Value;
    var code = generateCodeForValue ( value );
    root.Add ( name, nameToIdentifier ( name ) );
#>
            /// <summary>
            /// The <#=name#> character category/block node.
            /// </summary>
            public static readonly <#=code.Item1#> <#=nameToIdentifier ( name )#> = <#=code.Item2#>; // <#=value#>

<#
}
root.Simplify ( );
#>

            #endregion Fields

            #region AllCategories

            /// <summary>
            /// An array containing all category names and their respective nodes. To transform a name into
            /// a node use <see cref="TryParse(String, out GrammarNode{Char}?)" /> or
            /// <see cref="TryParse(ReadOnlySpan{Char}, out GrammarNode{Char}?)" />.
            /// </summary>
            public static readonly ImmutableArray<KeyValuePair<String, GrammarNode<Char>>> AllCategories = ImmutableArray.CreateRange ( new[]
            {
<#
foreach ( var entry in entries )
{
    var name = entry.Attribute ( "Name" ).Value;
    var fieldName = nameToIdentifier ( name );
#>
                new KeyValuePair<String, GrammarNode<Char>> ( "<#=name#>", <#=fieldName#> ),
<#
}
#>
            } );

            #endregion AllCategories

            /// <summary>
            /// Attempts to parse the regex name of a unicode character category or code block.
            /// </summary>
            /// <paramref name="name">The regex name to be parsed.</paramref>
            /// <paramref name="node">The node that matches the provided regex name.</paramref>
            /// <returns>Whether the name was recognized or not.</returns>
            public static Boolean TryParse ( String name, [NotNullWhen ( true )] out GrammarNode<Char>? node ) => TryParse ( name.AsSpan ( ), out node );

            /// <summary>
            /// Attempts to parse the regex name of a unicode character category or code block.
            /// </summary>
            /// <paramref name="name">The regex name to be parsed.</paramref>
            /// <paramref name="node">The node that matches the provided regex name.</paramref>
            /// <returns>Whether the name was recognized or not.</returns>
            public static Boolean TryParse ( ReadOnlySpan<Char> name, [NotNullWhen ( true )] out GrammarNode<Char>? node )
            {
<#
generateTrie ( "name", "node", root, indentationLevel: 4 );
#>

                node = default;
                return false;
            }

            /// <summary>
            /// Converts a <see cref="UnicodeCategory"/> back into its regex name.
            /// </summary>
            /// <paramref name="category">The category to convert.</paramref>
            /// <returns>The regex name of the category.</returns>
            public static String? ToString ( UnicodeCategory category )
            {
                return category switch
                {
<#
foreach ( var value in Enum.GetValues ( typeof ( UnicodeCategory ) ) )
{
    var stringKey = entries.First ( entry => generateCodeForValue ( entry.Attribute ( "Value" ).Value ).Item2 == $"new UnicodeCategoryTerminal ( UnicodeCategory.{value} )" )
                           .Attribute ( "Name" )
                           .Value;
#>
                    UnicodeCategory.<#=value#> => "<#=stringKey#>",
<#
}
#>
                    _ => null
                };
            }
        }
    }
}

<#+
class TreeNode
{
    public Dictionary<String, TreeNode> Children { get; } = new Dictionary<String, TreeNode> ( );
    public String Value { get; set; }

    public void Add ( String key, String value )
    {
        if ( key.Length == 0 )
        {
            if ( this.Value != null )
                throw new InvalidOperationException ( $"Cannot add value since value was already added. Key = {key}    Value = {value}" );
            this.Value = value;
        }
        else
        {
            var ch = Char.ToString ( key[0] );
            if ( !Children.TryGetValue ( ch, out var node ) )
            {
                Children[ch] =
                    node = new TreeNode ( );
            }

            node.Add ( key.Substring ( 1 ), value );
        }
    }

    public void Simplify ( )
    {
        if ( this.Children.Count == 1 )
        {
            var kv1 = this.Children.Single ( );
            kv1.Value.Simplify ( );
            if ( kv1.Value.Children.Count == 1 && kv1.Value.Value == null )
            {
                var kv2 = kv1.Value.Children.Single ( );
                this.Children.Remove ( kv1.Key );
                this.Children.Add ( kv1.Key + kv2.Key, kv2.Value );
            }
        }
        else
        {
            foreach ( var kv in this.Children )
                kv.Value.Simplify ( );
        }
    }
}

String nameToIdentifier ( String name ) =>
    new String ( name.Where ( c => Char.IsLetterOrDigit ( c ) ).ToArray ( ) );

Tuple<String, String> ctorFromClass ( String type, String parameters )
{
    return new Tuple<String, String> ( type, $"new {type} ( {parameters} )" );
}

Tuple<String, String> generateCodeForValue ( String value )
{
    var alternatives = value.Split ( new[] { '|' }, StringSplitOptions.RemoveEmptyEntries );
    if ( alternatives.Length > 1 )
    {
        return ctorFromClass ( "Alternation<Char>", String.Join ( ", ", alternatives.Select ( generateCodeForValue ) ) );
    }
    else
    {
        if ( value.StartsWith ( "Range(" ) )
        {
            value = value.Substring ( "Range(".Length );
            value = value.Substring ( 0, value.Length - 1 );
            var range = value.Split ( '-' );
            return ctorFromClass ( "CharacterRange", $"'\\u{range[0]}', '\\u{range[1]}'" );
        }
        else if ( value.StartsWith ( "CategoryFlagSet(" ) )
        {
            value = value.Substring ( "CategoryFlagSet(".Length );
            value = value.Substring ( 0, value.Length - 1 );
            var parts = value.Split ( new[] { ',' }, StringSplitOptions.RemoveEmptyEntries ).Select ( part => part.Trim ( ) ).ToArray ( );
            if ( parts.Length == 1 )
            {
                if ( Enum.TryParse<UnicodeCategory> ( parts[0], true, out var category ) )
                {
                    return ctorFromClass ( "UnicodeCategoryTerminal", $"UnicodeCategory.{category}" );
                }
                else
                {
                    throw new InvalidOperationException ( "Unrecognized unicode category: " + value );
                }
            }
            else if ( parts.Length == 2 )
            {
                if ( Enum.TryParse<UnicodeCategory> ( parts[1] + parts[0], true, out var category ) )
                {
                    return ctorFromClass ( "UnicodeCategoryTerminal", $"UnicodeCategory.{category}" );
                }
                else if ( Enum.TryParse<UnicodeCategory> ( parts[0] + parts[1], true, out category ) )
                {
                    return ctorFromClass ( "UnicodeCategoryTerminal", $"UnicodeCategory.{category}" );
                }
                else
                {
                    throw new InvalidOperationException ( "Unrecognized unicode category: " + value );
                }
            }
            else
            {
                return ctorFromClass ( "Alternation<Char>", String.Join ( ", ", parts ) );
            }
        }
        else
        {
            throw new InvalidOperationException ( "Unknown type of value." );
        }
    }
}

Boolean generateTrie ( String keyName, String outName, TreeNode node, Int32 indentationLevel = 0, Int32 currentIndex = 0 )
{
    var indentation = String.Join ( "", Enumerable.Range ( 0, indentationLevel ).Select ( x => "    " ) );
    if ( node.Children.Count == 1 )
    {
        var kv = node.Children.Single ( );

        if ( kv.Key.Length > 1 )
        {
            var offset = 0;
            var lastKeyIdx = kv.Key.Length - 1;
            var tests = kv.Key.Select ( ch => $"{keyName}[{currentIndex + offset++}] == '{ch}'" );
            WriteIndentedLine ( $"if ( {keyName}.Length > {currentIndex + lastKeyIdx} && {String.Join ( " && ", tests )} )" );
        }
        else
        {
            WriteIndentedLine ( $"if ( {keyName}.Length > {currentIndex} && {keyName}[{currentIndex}] == '{kv.Key}' )" );
        }
        WriteIndentedLine ( "{" );
        var innerResult = generateTrie ( keyName, outName, kv.Value, indentationLevel + 1, currentIndex + kv.Key.Length );
        WriteIndentedLine ( "}" );
        if ( node.Value != null )
        {
            WriteIndentedLine ( "else" );
            WriteIndentedLine ( "{" );
            indentationLevel++;
            {
                writeNodeValue ( );
            }
            indentationLevel--;
            WriteIndentedLine ( "}" );
            return innerResult;
        }
        else
        {
            return false;
        }
    }
    else if ( node.Children.Count > 1 )
    {
        WriteIndentedLine ( $"if ( {keyName}.Length > {currentIndex} )" );
        WriteIndentedLine ( "{");
        indentationLevel++;
        {
            WriteIndentedLine ( $"switch ( {keyName}[{currentIndex}] )" );
            WriteIndentedLine ( "{" );
            indentationLevel++;
            {
                foreach ( var kv in node.Children )
                {
                    WriteIndentedLine ( $"case '{kv.Key}':" );
                    WriteIndentedLine ( "{" );
                    if ( !generateTrie ( keyName, outName, kv.Value, indentationLevel + 1, currentIndex + 1 ) )
                    {
                        WriteIndentedLine ( "    break;" );
                    }
                    WriteIndentedLine ( "}" );
                }
            }
            indentationLevel--;
            WriteIndentedLine ( "}" );
        }
        indentationLevel--;
        WriteIndentedLine ( "}" );
        if ( node.Value != null )
        {
            WriteIndentedLine ( "else" );
            WriteIndentedLine ( "{" );
            indentationLevel++;
            {
                writeNodeValue ( );
            }
            indentationLevel--;
            WriteIndentedLine ( "}" );
        }
        
        // Since we don't add the default clause to switches, then they all can fall through.
        return false;
    }
    else
    {
        writeNodeValue ( );
        return true;
    }

    void writeNodeValue ( )
    {
        WriteIndentedLine ( $"{outName} = {node.Value};" );
        WriteIndentedLine ( "return true;" );
    }
    void WriteIndentedLine ( String value ) => WriteLine ( new string ( ' ', indentationLevel * 4 ) + value );
}
#>