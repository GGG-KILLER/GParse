<#@ template debug="false" hostspecific="false" language="C#" #>
<#@ assembly name="System.Core" #>
<#@ import namespace="System.Linq" #>
<#@ import namespace="System.Text" #>
<#@ import namespace="System.Collections.Generic" #>
<#@ output extension=".cs" #>
<#
	String minMaxHeader = @"if ( max < min )
				throw new InvalidOperationException ( ""Cannot have a maximum value smaller than the minimum value."" );";
#>
using System;

namespace GParse.Common.Math
{
	public class SaturatingMath
	{
<#foreach(String type in new[]{ "Int32", "Int64" }){
String funcArgs = $"in {type} lhs, in {type} rhs, in {type} min, in {type} max";#>
		#region <#=type#>

		#region Overflow/Underflow checks

		public static Boolean WillAdditionOverflow ( <#=funcArgs#> )
		{
			<#=minMaxHeader#>

			return lhs != 0 &&  rhs > 0 && lhs >= max - rhs /* ∧ rhs > 0 */;
		}

		public static Boolean WillAdditionUnderflow ( <#=funcArgs#> )
		{
			<#=minMaxHeader#>

			return lhs != 0 && rhs < 0 && lhs <= min - rhs /* ∧ rhs < 0 */;
		}

		public static Boolean WillSubtractionOverflow ( <#=funcArgs#> )
		{
			<#=minMaxHeader#>

			return lhs != 0 && rhs > 0 && lhs >= max + rhs /* ∧ rhs < 0 */;
		}

		public static Boolean WillSubtractionUnderflow ( <#=funcArgs#> )
		{
			<#=minMaxHeader#>

			return lhs != 0 && rhs < 0 && lhs <= min + rhs /* ∧ rhs > 0 */;
		}

		public static Boolean WillMultiplicationOverflow ( <#=funcArgs#> )
		{
			<#=minMaxHeader#>

			return lhs != 0 && rhs != 0 && lhs >= max / rhs;
		}

		public static Boolean WillMultiplicationUnderflow ( <#=funcArgs#> )
		{
			<#=minMaxHeader#>

			return lhs != 0 && rhs != 0 && lhs <= min / rhs;
		}

		public static Boolean WillDivisionOverflow ( <#=funcArgs#> )
		{
			<#=minMaxHeader#>

			return lhs != 0 && rhs != 0 && lhs >= max * rhs;
		}

		public static Boolean WillDivisionUnderflow ( <#=funcArgs#> )
		{
			<#=minMaxHeader#>

			return lhs != 0 && rhs != 0 && lhs <= min * rhs;
		}

		#endregion Overflow/Underflow checks

		#region Math operations

		public static <#=type#> Add ( <#=funcArgs#> )
		{
			if ( WillAdditionOverflow ( lhs, rhs, min, max ) )
				return max;
			else if ( WillAdditionUnderflow ( lhs, rhs, min, max ) )
				return min;
			else
				return lhs + rhs;
		}

		public static <#=type#> Subtract ( <#=funcArgs#> )
		{
			if ( WillSubtractionOverflow ( lhs, rhs, min, max ) )
				return max;
			else if ( WillSubtractionUnderflow ( lhs, rhs, min, max ) )
				return min;
			else
				return lhs - rhs;
		}

		public static <#=type#> Multiply ( <#=funcArgs#> )
		{
			if ( WillMultiplicationOverflow ( lhs, rhs, min, max ) )
				return max;
			else if ( WillMultiplicationUnderflow ( lhs, rhs, min, max ) )
				return min;
			else
				return lhs * rhs;
		}

		public static <#=type#> Divide ( <#=funcArgs#> )
		{
			if ( WillDivisionOverflow ( lhs, rhs, min, max ) )
				return max;
			else if ( WillDivisionUnderflow ( lhs, rhs, min, max ) )
				return min;
			else
				return lhs / rhs;
		}

		#endregion Math operations

		#endregion <#=type#>

<#}#>
<#foreach(String type in new[]{"UInt32", "UInt64"}){
String funcArgs = $"in {type} lhs, in {type} rhs, in {type} min, in {type} max";#>
		#region <#=type#>

		#region Overflow/Underflow check

		public static Boolean WillAdditionOverflow ( <#=funcArgs#> )
		{
			<#=minMaxHeader#>

			return lhs != 0 && rhs != 0 && lhs >= max - rhs /* ∧ rhs > 0 */;
		}

		public static Boolean WillSubtractionUnderflow ( <#=funcArgs#> )
		{
			<#=minMaxHeader#>

			return lhs != 0 && rhs != 0 && lhs <= min + rhs /* ∧ rhs > 0 */;
		}

		public static Boolean WillMultiplicationOverflow ( <#=funcArgs#> )
		{
			<#=minMaxHeader#>

			return lhs != 0 && rhs != 0 && lhs >= max / rhs;
		}

		public static Boolean WillDivisionUnderflow ( <#=funcArgs#> )
		{
			<#=minMaxHeader#>

			return lhs != 0 && rhs != 0 && lhs <= min * rhs;
		}

		#endregion Overflow/Underflow check

		#region Math operations

		public static <#=type#> Add ( <#=funcArgs#> )
		{
			if ( WillAdditionOverflow ( lhs, rhs, min, max ) )
				return max;
			else
				return lhs + rhs;
		}

		public static <#=type#> Subtract ( <#=funcArgs#> )
		{
			if ( WillSubtractionUnderflow ( lhs, rhs, min, max ) )
				return min;
			else
				return lhs - rhs;
		}

		public static <#=type#> Multiply ( <#=funcArgs#> )
		{
			if ( WillMultiplicationOverflow ( lhs, rhs, min, max ) )
				return max;
			else
				return lhs * rhs;
		}

		public static <#=type#> Divide ( <#=funcArgs#> )
		{
			if ( WillDivisionUnderflow ( lhs, rhs, min, max ) )
				return min;
			else
				return lhs / rhs;
		}

		#endregion Math operations

		#endregion <#=type#>

<#}#>
	}
}
