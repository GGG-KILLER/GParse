(*
	O U T D A T E D
	D O N ' T
	U S E
*)

(* Phase   1: Basic Blocks *)
char              := ? \x, \b, \ and any other C escape code or normal char ? ;
digit             := ? Char.IsDigit ? ;
string            := { char } ;
integer           := { digit } ;
char-category     := ? all POSIX, Js and Java character classes used in Regular Expressions ? ;

(* Phase   2: Atomic Expressions *)
(* Phase 2.1: Sets *)
set-char-range    := char, '-', char ;
set               := '[', { char-category | set-char-range | char }, ']' ;

(* Phase 2.2: Grouping and literals *)
group             := '(', expression, ')' ;
string-literal    := '\'', string, '\'' ;
rule-reference    := ? Regex([a-zA-Z0-9_-]+) ? ;
atomic            := set | grouping | string | rule-reference | char-category ;

(* Phase   3: Suffix expression *)
repetition-suffix := '{', integer, [ ',', integer ], '}' ;
suffix-expression := suffix-expression, { '*' | '+' | '?' | suffix-repetition } | atomic;

(* Phase   4: Prefix expression *)
prefix-expression := { ( '!' | '-' | 'i:' | 'ignore:' | 'j:' | 'join:' | 'm:' | 'mark:' | 'im:' | 'imark:' ) }, prefix-expression | suffix-expression

(* Phase   4: Expression *)
expression        := prefix-expression, [ '|', expression ];